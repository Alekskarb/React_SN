{"ast":null,"code":"import _objectSpread from \"D:\\\\React_SN\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { usersAPI } from \"../api/api\";\nlet ADD_POST = 'ADD-POST';\nlet UPDATE_POST_TEXT = 'UPDATE-POST-TEXT';\nlet SET_USER_PROFILE = 'SET_USER_PROFILE';\nlet initialState = {\n  myPost: [{\n    id: 1,\n    message: 'What is your name?',\n    likesCount: 0\n  }, {\n    id: 2,\n    message: 'My Name is Pawel',\n    likesCount: 456368\n  }, {\n    id: 3,\n    message: 'My Name is Sanek',\n    likesCount: 34\n  }, {\n    id: 4,\n    message: 'Very well',\n    likesCount: 45\n  }],\n  newPostText: 'samuray',\n  profile: null\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 5,\n          message: state.newPostText,\n          likesCount: 44\n        };\n        return _objectSpread({}, state, {\n          myPost: [...state.myPost, newPost],\n          newPostText: \"\"\n        });\n      }\n\n    case UPDATE_POST_TEXT:\n      {\n        return _objectSpread({}, state, {\n          newPostText: action.newText\n        });\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return _objectSpread({}, state, {\n          profile: action.profile\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = () => ({\n  type: ADD_POST\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const updatePostTextActionCreator = text => ({\n  type: UPDATE_POST_TEXT,\n  newText: text\n});\nexport const getUserProfile = userId => dispatch => {\n  usersAPI.getProfile(userId).then(response => {\n    dispatch(setUserProfile(response.data));\n  });\n};\nexport default profileReducer;","map":{"version":3,"sources":["D:/React_SN/src/Redux/profileReducer.jsx"],"names":["usersAPI","ADD_POST","UPDATE_POST_TEXT","SET_USER_PROFILE","initialState","myPost","id","message","likesCount","newPostText","profile","profileReducer","state","action","type","newPost","newText","addPostActionCreator","setUserProfile","updatePostTextActionCreator","text","getUserProfile","userId","dispatch","getProfile","then","response","data"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,IAAIC,QAAQ,GAAG,UAAf;AACA,IAAIC,gBAAgB,GAAG,kBAAvB;AACA,IAAIC,gBAAgB,GAAG,kBAAvB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,oBAAjB;AAAuCC,IAAAA,UAAU,EAAE;AAAnD,GAAD,EACJ;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,kBAAjB;AAAqCC,IAAAA,UAAU,EAAE;AAAjD,GADI,EAEJ;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,kBAAjB;AAAqCC,IAAAA,UAAU,EAAE;AAAjD,GAFI,EAGJ;AAACF,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,OAAO,EAAE,WAAjB;AAA8BC,IAAAA,UAAU,EAAE;AAA1C,GAHI,CADO;AAKfC,EAAAA,WAAW,EAAE,SALE;AAMfC,EAAAA,OAAO,EAAE;AANM,CAAnB;;AASA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,QAAL;AAAe;AACX,YAAIc,OAAO,GAAG;AACVT,UAAAA,EAAE,EAAE,CADM;AAEVC,UAAAA,OAAO,EAAEK,KAAK,CAACH,WAFL;AAGVD,UAAAA,UAAU,EAAE;AAHF,SAAd;AAKA,iCAAWI,KAAX;AACIP,UAAAA,MAAM,EAAE,CAAC,GAAGO,KAAK,CAACP,MAAV,EAAkBU,OAAlB,CADZ;AAEIN,UAAAA,WAAW,EAAE;AAFjB;AAGH;;AACD,SAAKP,gBAAL;AAAuB;AACnB,iCAAYU,KAAZ;AACIH,UAAAA,WAAW,EAAEI,MAAM,CAACG;AADxB;AAEH;;AACD,SAAKb,gBAAL;AAAuB;AACnB,iCAAYS,KAAZ;AAAmBF,UAAAA,OAAO,EAAEG,MAAM,CAACH;AAAnC;AACH;;AACD;AACI,aAAOE,KAAP;AAnBR;AAqBH,CAtBD;;AAwBA,OAAO,MAAMK,oBAAoB,GAAG,OAAO;AAACH,EAAAA,IAAI,EAAEb;AAAP,CAAP,CAA7B;AACP,OAAO,MAAMiB,cAAc,GAAIR,OAAD,KAAc;AAACI,EAAAA,IAAI,EAAEX,gBAAP;AAAyBO,EAAAA;AAAzB,CAAd,CAAvB;AACP,OAAO,MAAMS,2BAA2B,GAAIC,IAAD,KAAW;AAACN,EAAAA,IAAI,EAAEZ,gBAAP;AAAyBc,EAAAA,OAAO,EAAEI;AAAlC,CAAX,CAApC;AAEP,OAAO,MAAMC,cAAc,GAAGC,MAAD,IAAYC,QAAD,IAAc;AAC9CvB,EAAAA,QAAQ,CAACwB,UAAT,CAAoBF,MAApB,EAA4BG,IAA5B,CAAiCC,QAAQ,IAAI;AACrCH,IAAAA,QAAQ,CAACL,cAAc,CAACQ,QAAQ,CAACC,IAAV,CAAf,CAAR;AACX,GAFG;AAGP,CAJM;AAMP,eAAehB,cAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\r\n\r\nlet ADD_POST = 'ADD-POST';\r\nlet UPDATE_POST_TEXT = 'UPDATE-POST-TEXT';\r\nlet SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n\r\nlet initialState = {\r\n    myPost: [{id: 1, message: 'What is your name?', likesCount: 0},\r\n        {id: 2, message: 'My Name is Pawel', likesCount: 456368},\r\n        {id: 3, message: 'My Name is Sanek', likesCount: 34},\r\n        {id: 4, message: 'Very well', likesCount: 45}],\r\n    newPostText: 'samuray',\r\n    profile: null\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 44\r\n            };\r\n            return {...state,\r\n                myPost: [...state.myPost, newPost],\r\n                newPostText: \"\"};\r\n        }\r\n        case UPDATE_POST_TEXT: {\r\n            return  {...state,\r\n                newPostText: action.newText};\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return  {...state, profile: action.profile};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST});\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\nexport const updatePostTextActionCreator = (text) => ({type: UPDATE_POST_TEXT, newText: text});\r\n\r\nexport const getUserProfile =(userId)=> (dispatch) => {\r\n        usersAPI.getProfile(userId).then(response => {\r\n                dispatch(setUserProfile(response.data));\r\n    })\r\n}\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}