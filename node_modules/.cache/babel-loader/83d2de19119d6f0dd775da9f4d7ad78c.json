{"ast":null,"code":"import _objectSpread from \"D:\\\\#1_INcubator\\\\#1_React\\\\new\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { usersAPI } from \"../api/api\";\nlet SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread({}, state, {}, action.data, {\n        isAuth: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login) => ({\n  type: SET_USER_DATA,\n  data: {\n    id,\n    email,\n    login\n  }\n});\nexport const getAuthorize = () => dispatch => {\n  usersAPI.authorize().then(response => {\n    if (response.data.resultCode === 0) {\n      let _response$data$data = response.data.data,\n          id = _response$data$data.id,\n          login = _response$data$data.login,\n          email = _response$data$data.email;\n      dispatch(setAuthUserData(id, email, login));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/#1_INcubator/#1_React/new/src/Redux/authReducer.jsx"],"names":["usersAPI","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","getAuthorize","dispatch","authorize","then","response","resultCode"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,IAAIC,aAAa,GAAG,eAApB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,+BACOO,KADP,MAEOC,MAAM,CAACE,IAFd;AAGIL,QAAAA,MAAM,EAAE;AAHZ;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUC,CAXL;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,MAAuB;AAACK,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,IAAI,EAAE;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA;AAAZ;AAA5B,CAAvB,CAAxB;AAEP,OAAO,MAAMQ,YAAY,GAAE,MAAMC,QAAD,IAAa;AACxCd,EAAAA,QAAQ,CAACe,SAAT,GACQC,IADR,CACaC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAqC;AAAA,gCACRD,QAAQ,CAACN,IAAT,CAAcA,IADN;AAAA,UAC5BR,EAD4B,uBAC5BA,EAD4B;AAAA,UACxBE,KADwB,uBACxBA,KADwB;AAAA,UACjBD,KADiB,uBACjBA,KADiB;AAEjCU,MAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,GANR;AAOJ,CARM;AAWP,eAAeE,WAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\r\n\r\nlet SET_USER_DATA = 'SET_USER_DATA';\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n                };\r\n        default:\r\n            return state;\r\n            }\r\n    }\r\n\r\nexport const setAuthUserData = (id, email, login) => ({type: SET_USER_DATA, data: {id, email, login}});\r\n\r\nexport const getAuthorize =()=> (dispatch)=> {\r\n     usersAPI.authorize()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0 ) {\r\n                    let {id, login, email} = response.data.data;\r\n                    dispatch(setAuthUserData(id, email, login))\r\n                }\r\n            });\r\n}\r\n\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}