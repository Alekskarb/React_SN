{"ast":null,"code":"import _objectSpread from \"D:\\\\#1_INcubator\\\\#1_React\\\\new\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { usersAPI } from \"../api/api\";\nlet FOLLOW = 'FOLLOW';\nlet UNFOLLOW = 'UNFOLLOW';\nlet SET_USERS = 'SET_USERS';\nlet SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nlet SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nlet TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nlet TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 25,\n  totalUsersCount: 0,\n  currentPage: 2,\n  isFetching: true,\n  followingProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return _objectSpread({}, state, {\n        // users: [...state.users]\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return _objectSpread({}, u, {\n              followed: true\n            });\n          }\n\n          return u;\n        })\n      });\n\n    case UNFOLLOW:\n      return _objectSpread({}, state, {\n        // users: [...state.users]\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return _objectSpread({}, u, {\n              followed: false\n            });\n          }\n\n          return u;\n        })\n      });\n\n    case SET_USERS:\n      return _objectSpread({}, state, {\n        users: action.users\n      });\n\n    case SET_CURRENT_PAGE:\n      return _objectSpread({}, state, {\n        currentPage: action.currentPage\n      });\n\n    case SET_TOTAL_USERS_COUNT:\n      return _objectSpread({}, state, {\n        totalUsersCount: action.count\n      });\n\n    case TOGGLE_IS_FETCHING:\n      return _objectSpread({}, state, {\n        isFetching: action.isFetching\n      });\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return _objectSpread({}, state, {\n        followingProgress: action.isFetching ? [...state.followingProgress, action.userId] : state.followingProgress.filter(id => id != action.userId)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const setFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const setFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(setFetching(true));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(setFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(setFollowingProgress(true, userId));\n    usersAPI.follow(userId).then(response => {\n      if (response.resultCode === 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(setFollowingProgress(false, userId));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(setFollowingProgress(true, userId));\n    usersAPI.unfollow(userId).then(response => {\n      if (response.resultCode === 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(setFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/#1_INcubator/#1_React/new/src/Redux/usersReducer.jsx"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","setFetching","setFollowingProgress","getUsers","dispatch","then","data","items","totalCount","follow","response","resultCode","unfollow"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/api\";\r\n\r\nlet FOLLOW = 'FOLLOW';\r\nlet UNFOLLOW = 'UNFOLLOW';\r\nlet SET_USERS = 'SET_USERS';\r\nlet SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nlet SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nlet TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nlet TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 25,\r\n    totalUsersCount: 0,\r\n    currentPage: 2,\r\n    isFetching: true,\r\n    followingProgress: [],\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users};\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n            case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count};\r\n            case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching};\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {...state, followingProgress: action.isFetching\r\n                    ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id != action.userId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId});\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId});\r\nexport const setUsers = (users) => ({type: SET_USERS, users});\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount});\r\nexport const setFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const setFollowingProgress = (isFetching, userId) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId});\r\n\r\nexport const getUsers = (currentPage, pageSize) => {\r\n  return  (dispatch)=> {\r\n   dispatch(setFetching(true));\r\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n        dispatch(setFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    });\r\n}}\r\nexport const follow = (userId) => {\r\n  return  (dispatch)=> {\r\n      dispatch(setFollowingProgress(true, userId));\r\n      usersAPI.follow(userId)\r\n          .then(response => {\r\n              if (response.resultCode === 0) {\r\n                  dispatch(followSuccess(userId))\r\n              }\r\n              dispatch(setFollowingProgress(false, userId));\r\n          })\r\n}}\r\nexport const unfollow = (userId) => {\r\n  return  (dispatch)=> {\r\n      dispatch(setFollowingProgress(true, userId));\r\n      usersAPI.unfollow(userId)\r\n          .then(response => {\r\n              if (response.resultCode === 0) {\r\n                  dispatch(unfollowSuccess(userId))\r\n              }\r\n              dispatch(setFollowingProgress(false, userId));\r\n          })\r\n}}\r\n\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}